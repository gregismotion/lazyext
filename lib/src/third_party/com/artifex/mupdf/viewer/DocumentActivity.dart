// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: com.artifex.mupdf.viewer.DocumentActivity
class DocumentActivity extends jni.JObject {
  @override
  late final jni.JObjType<DocumentActivity> $type = type;

  DocumentActivity.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/viewer/DocumentActivity");

  /// The type which includes information such as the signature of this class.
  static const type = $DocumentActivityType();
  static final _id_mDisplayDPI = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"mDisplayDPI",
    r"I",
  );

  /// from: protected int mDisplayDPI
  int get mDisplayDPI => jni.Jni.accessors
      .getField(reference, _id_mDisplayDPI, jni.JniCallType.intType)
      .integer;

  /// from: protected int mDisplayDPI
  set mDisplayDPI(int value) =>
      jni.Jni.env.SetIntField(reference, _id_mDisplayDPI, value);

  static final _id_mLayoutButton = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"mLayoutButton",
    r"Landroid/view/View;",
  );

  /// from: protected android.view.View mLayoutButton
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject get mLayoutButton =>
      const jni.JObjectType().fromRef(jni.Jni.accessors
          .getField(reference, _id_mLayoutButton, jni.JniCallType.objectType)
          .object);

  /// from: protected android.view.View mLayoutButton
  /// The returned object must be deleted after use, by calling the `delete` method.
  set mLayoutButton(jni.JObject value) =>
      jni.Jni.env.SetObjectField(reference, _id_mLayoutButton, value.reference);

  static final _id_mLayoutPopupMenu = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"mLayoutPopupMenu",
    r"Landroid/widget/PopupMenu;",
  );

  /// from: protected android.widget.PopupMenu mLayoutPopupMenu
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject get mLayoutPopupMenu =>
      const jni.JObjectType().fromRef(jni.Jni.accessors
          .getField(reference, _id_mLayoutPopupMenu, jni.JniCallType.objectType)
          .object);

  /// from: protected android.widget.PopupMenu mLayoutPopupMenu
  /// The returned object must be deleted after use, by calling the `delete` method.
  set mLayoutPopupMenu(jni.JObject value) => jni.Jni.env
      .SetObjectField(reference, _id_mLayoutPopupMenu, value.reference);

  static final _id_ctor =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory DocumentActivity() {
    return DocumentActivity.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_ctor, []).object);
  }

  static final _id_onCreate = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onCreate", r"(Landroid/os/Bundle;)V");

  /// from: public void onCreate(android.os.Bundle bundle)
  void onCreate(
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_onCreate,
        jni.JniCallType.voidType, [bundle.reference]).check();
  }

  static final _id_requestPassword = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"requestPassword", r"(Landroid/os/Bundle;)V");

  /// from: public void requestPassword(android.os.Bundle bundle)
  void requestPassword(
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_requestPassword,
        jni.JniCallType.voidType, [bundle.reference]).check();
  }

  static final _id_relayoutDocument = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"relayoutDocument", r"()V");

  /// from: public void relayoutDocument()
  void relayoutDocument() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_relayoutDocument, jni.JniCallType.voidType, []).check();
  }

  static final _id_createUI = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"createUI", r"(Landroid/os/Bundle;)V");

  /// from: public void createUI(android.os.Bundle bundle)
  void createUI(
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_createUI,
        jni.JniCallType.voidType, [bundle.reference]).check();
  }

  static final _id_onActivityResult = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onActivityResult", r"(IILandroid/content/Intent;)V");

  /// from: protected void onActivityResult(int i, int i1, android.content.Intent intent)
  void onActivityResult(
    int i,
    int i1,
    jni.JObject intent,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onActivityResult,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1), intent.reference]).check();
  }

  static final _id_onSaveInstanceState = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onSaveInstanceState", r"(Landroid/os/Bundle;)V");

  /// from: protected void onSaveInstanceState(android.os.Bundle bundle)
  void onSaveInstanceState(
    jni.JObject bundle,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onSaveInstanceState,
        jni.JniCallType.voidType,
        [bundle.reference]).check();
  }

  static final _id_onPause =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onPause", r"()V");

  /// from: protected void onPause()
  void onPause() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onPause, jni.JniCallType.voidType, []).check();
  }

  static final _id_onDestroy =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onDestroy", r"()V");

  /// from: public void onDestroy()
  void onDestroy() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onDestroy, jni.JniCallType.voidType, []).check();
  }

  static final _id_onSearchRequested = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onSearchRequested", r"()Z");

  /// from: public boolean onSearchRequested()
  bool onSearchRequested() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_onSearchRequested, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_onPrepareOptionsMenu = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"onPrepareOptionsMenu", r"(Landroid/view/Menu;)Z");

  /// from: public boolean onPrepareOptionsMenu(android.view.Menu menu)
  bool onPrepareOptionsMenu(
    jni.JObject menu,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onPrepareOptionsMenu,
        jni.JniCallType.booleanType,
        [menu.reference]).boolean;
  }

  static final _id_onStart =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onStart", r"()V");

  /// from: protected void onStart()
  void onStart() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onStart, jni.JniCallType.voidType, []).check();
  }

  static final _id_onStop =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"onStop", r"()V");

  /// from: protected void onStop()
  void onStop() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onStop, jni.JniCallType.voidType, []).check();
  }

  static final _id_onBackPressed = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"onBackPressed", r"()V");

  /// from: public void onBackPressed()
  void onBackPressed() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onBackPressed, jni.JniCallType.voidType, []).check();
  }
}

class $DocumentActivityType extends jni.JObjType<DocumentActivity> {
  const $DocumentActivityType();

  @override
  String get signature => r"Lcom/artifex/mupdf/viewer/DocumentActivity;";

  @override
  DocumentActivity fromRef(jni.JObjectPtr ref) => DocumentActivity.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($DocumentActivityType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($DocumentActivityType) &&
        other is $DocumentActivityType;
  }
}
