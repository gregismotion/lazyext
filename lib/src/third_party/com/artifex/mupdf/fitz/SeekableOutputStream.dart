// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: com.artifex.mupdf.fitz.SeekableOutputStream
class SeekableOutputStream extends jni.JObject {
  @override
  late final jni.JObjType<SeekableOutputStream> $type = type;

  SeekableOutputStream.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/SeekableOutputStream");

  /// The type which includes information such as the signature of this class.
  static const type = $SeekableOutputStreamType();
  static final _id_write =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"write", r"([BII)V");

  /// from: public abstract void write(byte[] bs, int i, int i1)
  void write(
    jni.JArray<jni.jbyte> bs,
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_write,
        jni.JniCallType.voidType,
        [bs.reference, jni.JValueInt(i), jni.JValueInt(i1)]).check();
  }

  static final _id_truncate =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"truncate", r"()V");

  /// from: public abstract void truncate()
  void truncate() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_truncate, jni.JniCallType.voidType, []).check();
  }
}

class $SeekableOutputStreamType extends jni.JObjType<SeekableOutputStream> {
  const $SeekableOutputStreamType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/SeekableOutputStream;";

  @override
  SeekableOutputStream fromRef(jni.JObjectPtr ref) =>
      SeekableOutputStream.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($SeekableOutputStreamType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($SeekableOutputStreamType) &&
        other is $SeekableOutputStreamType;
  }
}
