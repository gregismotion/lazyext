// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Font.dart" as font_;

import "Matrix.dart" as matrix_;

/// from: com.artifex.mupdf.fitz.TextWalker
class TextWalker extends jni.JObject {
  @override
  late final jni.JObjType<TextWalker> $type = type;

  TextWalker.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/TextWalker");

  /// The type which includes information such as the signature of this class.
  static const type = $TextWalkerType();
  static final _id_showGlyph = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"showGlyph",
      r"(Lcom/artifex/mupdf/fitz/Font;Lcom/artifex/mupdf/fitz/Matrix;IIZ)V");

  /// from: public abstract void showGlyph(com.artifex.mupdf.fitz.Font font, com.artifex.mupdf.fitz.Matrix matrix, int i, int i1, boolean z)
  void showGlyph(
    font_.Font font,
    matrix_.Matrix matrix,
    int i,
    int i1,
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_showGlyph, jni.JniCallType.voidType, [
      font.reference,
      matrix.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      z ? 1 : 0
    ]).check();
  }
}

class $TextWalkerType extends jni.JObjType<TextWalker> {
  const $TextWalkerType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/TextWalker;";

  @override
  TextWalker fromRef(jni.JObjectPtr ref) => TextWalker.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($TextWalkerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($TextWalkerType) && other is $TextWalkerType;
  }
}
